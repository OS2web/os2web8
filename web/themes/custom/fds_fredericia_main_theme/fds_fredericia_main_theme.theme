<?php

use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\file\Entity\File;


/**
 * Implements hook_theme_suggestions_page().
 */
function fds_fredericia_main_theme_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if ($variables['elements']['#id'] == 'lastupdated') {
    if (file_exists(__DIR__ . '/templates/block/block--lastupdated.html.twig')) {
      $suggestions = ["block__lastupdated"];
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function fds_fredericia_main_theme_preprocess_block(&$variables) {

  if ($variables['elements']['#id'] == 'fds_fredericia_main_theme_indholdfield') {
    $node = $variables['content']['field']['#object'];
    $ext_links =  $node->get('field_ext_links')->getValue();
    foreach( $ext_links as $ext_link) {
      $url = Url::fromUri($ext_link['uri']);
      $link = new Link($ext_link['title'], $url);
      $variables['content']['field'][] = $link->toRenderable();
    }
  }

  if ($variables['elements']['#id'] == 'lastupdated') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node && !empty($node->getType()) && $node->getType() == 'os2web_page') {
      $variables['lastupdated'] = date("d.m.Y", $node->getChangedTime());
    }
  }

    $variables['theme_settings'] = \Drupal::config('fds_fredericia_main_theme.settings')->get();
    if ($variables['theme_settings']['banner_image'][0]) {
        // Load the file entity using the file ID.
        $banner_image_id = $variables['theme_settings']['banner_image'][0];
        $banner_image_file = File::load($banner_image_id);

        if ($banner_image_file) {
          // Get the URL of the file.
          $banner_image_url = $banner_image_file->createFileUrl();

          // Pass the URL to the Twig template.
          $variables['banner_image_url'] = $banner_image_url;
        }
      }

}

/**
 * Implements hook_preprocess_page().
 */
function fds_fredericia_main_theme_preprocess_page(array &$variables) {
  $variables['theme_settings'] = _fds_base_theme_collect_theme_settings();
  $variables['theme_settings']['footer']['footer_show_latest_content'] = theme_get_setting('footer_show_latest_content');
  $variables['theme_settings']['footer']['footer_image'] = theme_get_setting('footer_image_choice');
  $variables['theme_settings']['footer']['footer_image_url'] = \Drupal::service('file_url_generator')->generateAbsoluteString(theme_get_setting('footer_image_path'));
  $variables['theme_settings']['branding']['branding_toggle'] = theme_get_setting('branding_toggle');
  $variables['theme_settings']['branding']['branding_text'] = theme_get_setting('branding_text');

  $variables['theme_settings']['external_links']['link1_url'] = theme_get_setting('link1_url');
  $variables['theme_settings']['external_links']['link1_label'] = theme_get_setting('link1_label');

  $variables['theme_settings']['external_links']['link2_url'] = theme_get_setting('link2_url');
  $variables['theme_settings']['external_links']['link2_label'] = theme_get_setting('link2_label');

  $variables['theme_settings']['external_links']['link3_url'] = theme_get_setting('link3_url');
  $variables['theme_settings']['external_links']['link3_label'] = theme_get_setting('link3_label');

  $variables['theme_settings']['external_links']['link4_url'] = theme_get_setting('link4_url');
  $variables['theme_settings']['external_links']['link4_label'] = theme_get_setting('link4_label');

  $variables['theme_settings']['external_links']['link5_url'] = theme_get_setting('link5_url');
  $variables['theme_settings']['external_links']['link5_label'] = theme_get_setting('link5_label');

  $variables['theme_settings']['external_links']['link6_url'] = theme_get_setting('link6_url');
  $variables['theme_settings']['external_links']['link6_label'] = theme_get_setting('link6_label');

  $variables['theme_settings']['external_links']['link7_url'] = theme_get_setting('link7_url');
  $variables['theme_settings']['external_links']['link7_label'] = theme_get_setting('link7_label');

  $variables['theme_settings']['external_links']['link8_url'] = theme_get_setting('link8_url');
  $variables['theme_settings']['external_links']['link8_label'] = theme_get_setting('link8_label');

  $variables['theme_settings']['external_links']['link9_url'] = theme_get_setting('link9_url');
  $variables['theme_settings']['external_links']['link9_label'] = theme_get_setting('link9_label');

  $variables['theme_settings']['external_links']['link10_url'] = theme_get_setting('link10_url');
  $variables['theme_settings']['external_links']['link10_label'] = theme_get_setting('link10_label');






  $variables['lastupdated'] = time();
}

/**
 * Implements hook_form_search_block_form_alter().
 */
function fds_fredericia_main_theme_form_search_block_form_alter(&$form, FormStateInterface $form_state) {
  $form['keys']['#attributes']['placeholder'] = t('Hvad søger du?');
}

/**
 * Implements hook_form_search_form_alter().
 */
function fds_fredericia_main_theme_form_search_form_alter(&$form, FormStateInterface $form_state) {
  $form['basic']['label'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['search-form-label'],
    ],
    'markup' => ['#markup' => $form['basic']['keys']['#title']->render()],
  ];
  $form['basic']['keys']['#title'] = '';
  $form['basic']['#attributes'] = [];
  $form['basic']['search-line'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['container-inline'],
    ],
    'keys' => $form['basic']['keys'],
    'submit' => $form['basic']['submit'],
  ];

  unset($form['basic']['keys']);
  unset($form['basic']['submit']);
}

/**
 * Implements template_preprocess_swiftmailer().
 */
function fds_fredericia_main_theme_preprocess_swiftmailer(&$variables) {
  global $base_url;
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $theme = \Drupal::theme()->getActiveTheme();
  $theme_path = $base_url . '/' . $theme->getPath();

  // Theme settings.
  $theme_settings = _fds_base_theme_collect_theme_settings();
  $variables['current_language'] = $language;
  $variables['base_url'] = $GLOBALS['base_url'] . '/';
  $variables['logo_url'] = $theme_path . '/dist/images/logo--mail.png';
  $variables['theme_settings'] = $theme_settings;

  // Header logo.
  if (!empty($theme_settings['language_logo']['header_logo__' . $language])) {
    $file = File::load($theme_settings['language_logo']['header_logo__' . $language]);
    if (!empty($file)) {
      $variables['logo_url'] = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
    }
  }
}

function fds_fredericia_main_theme_preprocess_anonymous_subscriptions_notification_email(&$variables) {
  global $base_url;
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $theme = \Drupal::theme()->getActiveTheme();
  $theme_path = $base_url . '/' . $theme->getPath();

  // Theme settings.
  $theme_settings = _fds_base_theme_collect_theme_settings();
  $variables['current_language'] = $language;
  $variables['base_url'] = $GLOBALS['base_url'] . '/';
  $variables['logo_url'] = $theme_path . '/dist/images/logo--mail.png';
  $variables['theme_settings'] = $theme_settings;

  // Header logo.
  if (!empty($theme_settings['language_logo']['header_logo__' . $language])) {
    $file = File::load($theme_settings['language_logo']['header_logo__' . $language]);
    if (!empty($file)) {
      $variables['logo_url'] = file_create_url($file->getFileUri());
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function fds_fredericia_main_theme_preprocess_anonymous_subscriptions_message(array &$variables) {
  global $base_url;
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $theme = \Drupal::theme()->getActiveTheme();
  $theme_path = $base_url . '/' . $theme->getPath();

  // Theme settings.
  $theme_settings = _fds_base_theme_collect_theme_settings();
  $variables['current_language'] = $language;
  $variables['base_url'] = $GLOBALS['base_url'] . '/';
  $variables['logo_url'] = $theme_path . '/dist/images/logo--mail.png';
  $variables['theme_settings'] = $theme_settings;

  // Header logo.
  if (!empty($theme_settings['language_logo']['header_logo__' . $language])) {
    $file = File::load($theme_settings['language_logo']['header_logo__' . $language]);
    if (!empty($file)) {
      $variables['logo_url'] = file_create_url($file->getFileUri());
    }
  }
  $subscription = $variables['subscription'];
  if (!empty($subscription->type->value) && $subscription->type->value == 'os2web_hearings_hearing_case') {
    $variables['link'] = Link::fromTextAndUrl(t('Klik her for at gå til høringer og afgørelser'), Url::fromUserInput('/hoeringer-og-afgoerelser'));
  }
}


/**
 * Implements hook_preprocess_term().
 */
function fds_fredericia_main_theme_preprocess_taxonomy_term(array &$variables) {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['term'];

  if ($variables['view_mode'] == 'full' && $term->bundle() == 'os2web_sektion') {
    // Get all pages that are using this section and are promoted.
    $entity_ids = getSectionPromotedNodes($term->id());
    if (empty($entity_ids)) {
      return;
    }

    $nodes = Node::loadMultiple($entity_ids);
    $promoted_node_links = [];

    /** @var \Drupal\node\NodeInterface $node */
    foreach ($nodes as $node) {
      $promoted_node_links[] = [
        'title' => $node->label(),
        'url' => $node->toUrl(),
      ];
    }

    $variables['#promoted_node_links'] = $promoted_node_links;
  }

  // Background color
  if ($term->field_os2web_color && $term->field_os2web_color->value) {
    $variables['background_color'] = $term->field_os2web_color->value;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function fds_fredericia_main_theme_preprocess_node(array &$variables) {

  $node = $variables['node'];
  $view_mode = $variables['elements']['#view_mode'];

  if ($view_mode == 'teaser' && $node->getType() == 'os2web_page') {
    $routeName = $node->toUrl()->getRouteName();
    $routeParameters = $node->toUrl()->getRouteParameters();
    $route = Drupal::service('router.route_provider')->getRouteByName($routeName);
    $routeMatch = new Drupal\Core\Routing\RouteMatch($routeName, $route, $routeParameters, $routeParameters);
    $breadcrumbs = Drupal::service('breadcrumb')->build($routeMatch)->toRenderable();
    $breadcrumb = array();
    if (!empty($breadcrumbs['#links']) && count($breadcrumbs['#links']) > 1) {
      foreach ($breadcrumbs['#links'] as $link) {
        $breadcrumb[] = array(
          'text' => $link->getText(),
          'url' => $link->getUrl()->toString()
        );
      }
    }
    $variables['breadcrumb'] = $breadcrumb;
  }


  if ($variables['view_mode'] == 'search_result' && $node->getType() == 'os2web_page') {
    $sectionLabels = [];
    if ($section_id = $node->field_os2web_page_section->target_id) {
      $parents = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadAllParents($section_id);

      foreach ($parents as $parent) {
        $sectionLabels[] = $parent->label();
      }

      $variables['#section_labels'] = array_reverse($sectionLabels);
    }
  }



  if ($variables['view_mode'] == 'full' && $node->getType() == 'os2web_event') {
    $startDateAttr = $variables['content']['field_os2web_event_start_date'][0]['#attributes']['datetime'];
    $endDateAttr = $variables['content']['field_os2web_event_end_date'][0]['#attributes']['datetime'];
    $endDateText = $variables['content']['field_os2web_event_end_date'][0]['#text'];
    if(substr($startDateAttr, 0 , 11) == substr($endDateAttr, 0 , 11)) {
      $newEndDate = substr($endDateText, -5);
      $variables['content']['field_os2web_event_end_date'][0]['#text'] = 'til ' . $newEndDate;
    }
  }

  $variables['#lastupdated'] = time();


}

/**
 * Implements hook_preprocess_media().
 */
function fds_fredericia_main_theme_preprocess_media(array &$variables) {
  $media = $variables['media'];
  $name = $media->getName();
  if (!empty($name)) {
    $mediaArray = $media->toArray();
    if (!empty($mediaArray['field_media_file'][0]['target_id'])) {
      $fileId = $mediaArray['field_media_file'][0]['target_id'];
      $file = \Drupal\file\Entity\File::load($fileId);
      $file->setFilename($name);
    }
  }
}



function node2box(&$node, $showImages) {

  $refNode = new stdClass();
  $refNode->title = (string) $node->field_os2web_page_heading->value;
  $refNode->title = (string) $node->getTitle();
  $refNode->url = $node->toUrl()->toString();
  $refNode->image = null;
  $refNode->children = array();

  if ($showImages) {
    if ($node->hasField('field_os2web_page_primaryicon')
      && $node->field_os2web_page_primaryicon instanceof EntityReferenceFieldItemListInterface
      && $node->field_os2web_page_primaryicon->referencedEntities()) {

      $refNode->image = $node->field_os2web_page_primaryicon->view([
        'label' => 'hidden',
        'type' => 'image',
        'settings' => [
          'image_style' => 'thumbnail'
        ],
      ]);
    }
    elseif ($node->hasField('field_os2web_page_primaryimage')
      && $node->field_os2web_page_primaryimage instanceof EntityReferenceFieldItemListInterface
      && $node->field_os2web_page_primaryimage->referencedEntities()) {

      $refNode->image = $node->field_os2web_page_primaryimage->view([
        'label' => 'hidden',
        'type' => 'image',
        'settings' => [
          'image_style' => 'os2web_normal'
        ],
      ]);
    }
    elseif ($node->hasField('field_os2web_page_paragraph_bann')
      && $node->field_os2web_page_paragraph_bann instanceof EntityReferenceFieldItemListInterface
      && ($bannerParagraph = $node->field_os2web_page_paragraph_bann->referencedEntities())) {
      $paragraph = $bannerParagraph[0];
      $refNode->image = $paragraph->field_os2web_banner_image->view([
        'label' => 'hidden',
        'type' => 'image',
        'settings' => [
          'image_style' => 'paragraph_background_image_thumb'
        ]
      ]);
    }
  }

  return $refNode;
}

function fds_fredericia_main_theme_preprocess_paragraph(&$variables) {

  $paragraph = $variables['paragraph'];

// Check if the paragraph type is "latest_news_card".
  if ($paragraph->bundle() === 'latest_news_card') {
    // Fetch the latest news articles of the "os2web_news" type.
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'os2web_news')
      ->sort('created', 'DESC')
      ->range(0, 3);
    $nids = $query->execute();

    // Load the article entities.
    $articles = \Drupal\node\Entity\Node::loadMultiple($nids);

    $variables['latest_news_articles'] = $articles;
  }

  if ($paragraph->bundle() === 'os2web_menu_box_paragraph') {

    $showImages = ($paragraph->field_os2web_menu_box_vm->value == 'image');
    $incPromoted = ($paragraph->field_os2web_menu_links_inc_pr_p->value == 1);
    $onlyUnique = ($paragraph->field_only_unique_links->value == 1);

    $variables['menubox'] = [];
    $node = \Drupal::routeMatch()->getParameter('node');

    // if current page is a node
    if ($node instanceof \Drupal\node\NodeInterface) {

      if ($onlyUnique && $node->hasField('field_uniq_link')) {

        $links = $node->get('field_uniq_link')->referencedEntities();
        if (count($links) > 0) {
          foreach ( $links AS $idx => $linknode ) {
            $nodebox = node2box($linknode, $showImages);
            if ($linknode->hasField('field_uniq_link')) {
              $nodebox_links = $linknode->get('field_uniq_link')->referencedEntities();
              if (count($nodebox_links) > 0) {
                foreach ($nodebox_links as $idx => $nodebox_link) {
                  $nodebox->children[] = (object) array(
                    'title' => $nodebox_link->getTitle(),
                    'url' => $nodebox_link->toUrl()->toString()
                  );
                }
              }
            }
            $variables['menubox'][] = $nodebox;
          }
        }

      } elseif ($node->hasField('field_os2web_page_section')) {
        $sections = $node->get('field_os2web_page_section')->referencedEntities();
        if (count($sections) > 0) {
          // there is only one but can be change in future ..
          $storage = \Drupal::entityTypeManager()->getStorage('node');
          foreach ($sections as $section) {

            $children = \Drupal::entityTypeManager()
              ->getStorage('taxonomy_term')
              ->loadTree('os2web_sektion', $section->tid->value, 1, true);
            foreach( $children AS $child ) {

              // find primary node for this child
              if ($child->hasField('field_primarynode') && !empty($child->field_primarynode->target_id)) {
                $primaryNode = \Drupal\node\Entity\Node::load($child->field_primarynode->target_id);
                if ($primaryNode) {
                    $entry = node2box($primaryNode, $showImages);

                    // find all node that has this taxonomy in section
                    $query = $storage->getQuery()
                        ->condition('field_os2web_page_section.target_id', $child->tid->value)
                        ->execute();
                    if (count($query) > 0) {
                        foreach ($query as $nodeId) {
                            $childNode = \Drupal\node\Entity\Node::load($nodeId);

                            if (
                                $childNode->getType() == 'os2web_page' &&
                                $childNode->isPublished() &&
                                (
                                    !$childNode->isPromoted() ||
                                    ($incPromoted && $childNode->isPromoted())
                                ) &&
                                $childNode->id() !== $primaryNode->id()) {
                                $entry->children[] = (object)[
                                    'title' => $childNode->getTitle(),
                                    'url' => $childNode->toUrl()->toString()
                                ];
                            }
                        }
                    }

                    $variables['menubox'][] = $entry;
                }
              }
            }
          }
        }
      }

    }
  }

  $variables['theme_settings'] = \Drupal::config('fds_fredericia_main_theme.settings')->get();

    if (isset($variables['theme_settings']['placeholder_image'][0])) {
      $placeholder_image_id = $variables['theme_settings']['placeholder_image'][0];
      $placeholder_image_file = File::load($placeholder_image_id);

      if ($placeholder_image_file) {
        $placeholder_image_url = $placeholder_image_file->createFileUrl();
        $variables['placeholder_image_url'] = $placeholder_image_url;
      }
    }

}

function fds_fredericia_main_theme_preprocess(&$variables, $hook) {
    $variables['base_path'] = base_path();
}


function fds_fredericia_main_theme_preprocess_field(&$variables) {
  if ($variables['element']['#bundle'] == 'os2web_banner_paragraph' && $variables['element']['#field_name'] == 'field_os2web_banner_links') {
    $paragraph = $variables['element']['#object'];
    if ($paragraph->hasField('field_banner_link_color') && !$paragraph->get('field_banner_link_color')->isEmpty()) {
      $link_color_value = $paragraph->get('field_banner_link_color')->getString();
      switch ($link_color_value) {
        case 'red_link':
          $variables['link_color_class'] = 'red-link-class';
          break;
        case 'lightred_link':
          $variables['link_color_class'] = 'lightred-link-class';
          break;
        case 'blue_link':
          $variables['link_color_class'] = 'blue-link-class';
          break;
        case 'lightblue_link':
          $variables['link_color_class'] = 'lightblue-link-class';
          break;
      }
    }
  }
}

function fds_fredericia_main_theme_preprocess_paragraph__os2web_focus_box(array &$variables) {
  $paragraph = $variables['paragraph'];

  for ($i = 1; $i <= 5; $i++) {
    $colorFieldName = "field_focusbox_link_color_" . $i;

    if ($paragraph->hasField($colorFieldName) && !$paragraph->get($colorFieldName)->isEmpty()) {
      $link_color_value = $paragraph->get($colorFieldName)->getString();
      $variables["link_color_value_$i"] = $link_color_value;
    }
  }
}

function fds_fredericia_main_theme_preprocess_paragraph__tableofcontents(array &$variables) {
  $paragraph = $variables['paragraph'];
  $original_contents = $paragraph->get('field_toc_content')->getValue();

  // Loop through each item to process any media entities.
  foreach ($original_contents as $key => &$content_item) {
    // Check if there's a media entity placeholder in the text.
    if (strpos($content_item['value'], '<drupal-entity') !== FALSE) {
      $dom = new \DOMDocument();
      @$dom->loadHTML(mb_convert_encoding($content_item['value'], 'HTML-ENTITIES', 'UTF-8'), LIBXML_NOERROR | LIBXML_NOWARNING);

      // Locate and replace each <drupal-entity> tag.
      foreach ($dom->getElementsByTagName('drupal-entity') as $entity_tag) {
        $uuid = $entity_tag->getAttribute('data-entity-uuid');

        // Load and render the media entity.
        $media = \Drupal::service('entity.repository')->loadEntityByUuid('media', $uuid);
        if ($media) {
          $view_builder = \Drupal::entityTypeManager()->getViewBuilder('media');
          $render_output = $view_builder->view($media, 'default'); // make sure you use a valid view mode
          $rendered_media = \Drupal::service('renderer')->renderRoot($render_output)->__toString();

          // Replace the placeholder with rendered output.
          $entity_tag->nodeValue = '';
          $cdata = $dom->createCDATASection($rendered_media);
          $entity_tag->appendChild($cdata);
        }
      }
      $content_item['value'] = $dom->saveHTML();
    }
  }
  $variables['processed_contents'] = $original_contents;
}


function fds_fredericia_main_theme_preprocess_block__fds_fredericia_main_theme_os2web_search_os2web_search_page_content(array &$variables) {
  $block_id = 'fds_fredericia_main_theme_os2web_search_type_facet';

  $block = \Drupal\block\Entity\Block::load($block_id);
  if ($block) {
    $block_content = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($block);

    $variables['facet_block'] = $block_content;
  }
  else {
    $variables['facet_block'] = [];
  }
}
