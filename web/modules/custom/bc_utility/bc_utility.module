<?php

use Drupal\bc_utility\Controller\OldContentNotity;
use Drupal\bc_utility\Plugin\Widgets\LinkWidgetValidators;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\search_api\Query\QueryInterface;
use Drupal\Core\Database\Database;
use Drupal\Core\Session\AccountInterface;
use Symfony\Component\HttpFoundation\Request;
use Drupal\Comment\CommentInterface;



/**
 * @file
 * Implementing custom hook functions
 */
function bc_utility_cron()
{


}

function bc_utility_mail($key, &$message, $params)
{
  if ($key === 'old_article')
  {
    if (isset($params['headers']))
    {
      $message['headers'] = array_merge($message['headers'], $params['headers']);
    }

    $message['from'] = $params['from'];
    $message['subject'] = t($params['subject']);
    $message['body'][] = new FormattableMarkup($params['body'], []);
  }
}


function bc_utility_mail_alter(&$message) {


  if ($message['module'] == 'anonymous_subscriptions') {

    // If node not yet have created the canonical url we try to create and replace it
    $body = implode("", $message['body']);
    preg_match_all('@(https?://([-\w\.]+[-\w])+(:\d+)?(/([\w/_\.#-]*(\?\S+)?[^\.\s])?)?)@', $body, $match);
    if (!empty($match[0])) {
      foreach ($match[0] as $link) {
        if (preg_match('/\/node\/(?<nodeid>\d+)/', $link, $matches)) {
          $node = \Drupal\node\Entity\Node::load($matches['nodeid']);
          if ($node) {
            $absolute = $node->toUrl()->setAbsolute()->toString();
            if ($link != $absolute) {
              $message['body'][0] = str_replace($link, $absolute, $body);
            }
          }
        }
      }
    }
  }

  if ($message['module'] == 'forum_notifications_subscription') {

    // forum_notifications_subscription do not work with html mails , try to convert it
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8';
    $message['headers']['Content-Transfer-Encoding'] = '8bit';
    $message['headers']['MIME-Version'] = '1.0';

    $theme_initialization = \Drupal::service('theme.initialization');
    $active_theme = \Drupal::theme()->getActiveTheme();
    $tmp_theme = $theme_initialization->getActiveThemeByName('fds_portal_ringsted_theme');
    if ($tmp_theme->getName() !== 'core') {
      \Drupal::theme()
        ->setActiveTheme($theme_initialization->getActiveThemeByName($tmp_theme->getName()));

      $body = implode("", $message['body']);

      preg_match_all('/https?\:\/\/[^\",]+/i', $body, $match);
      foreach( $match AS $key => $links ) {
        foreach($links AS $link) {
          $body = str_replace($link, '<a href="' . $link . '"> [link] </a>', $body);
        }
      }

      $render = [
        '#theme' => 'anonymous_subscriptions_notification_email',
        '#body' => $body,
        '#subscription_reason_text' => '',
        '#unsubscribe_url' => '',
        '#unsubscribe_all_url' => '',
      ];

      $message['body'][0] = $htmlBody = \Drupal::service('renderer')->renderPlain($render);

      \Drupal::theme()->setActiveTheme($active_theme);
    }
  }

}
/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Hide External link block if Internal links are exists
 */
function bc_utility_block_access($block, $operation, $account) {
  if ($operation == 'view') {
    if ($block->get('id') == 'fds_faxe_theme_indholdfield_ext_links'){
      $node = \Drupal::routeMatch()->getParameter('node');
      if($node && $node->hasField('field_link_til_andet_indhold')) {
        if (!empty($node->field_link_til_andet_indhold->getValue())) {
          return AccessResult::forbidden();
        }
      }
    }
  }
  return AccessResult::neutral();
}

function bc_utility_field_widget_single_element_form_alter(array &$element, FormStateInterface $form_state, array $context) {
  if (isset($element['uri'])) {
    $element['uri']['#element_validate'] = [[LinkWidgetValidators::class, 'validateUriElement']];
  }
}


function bc_utility_search_api_query_alter(QueryInterface &$query)
{
  $index = $query->getIndex();

  if (!empty($index)) {
    $server = $index->get('server');
  }

  if (empty($index) || empty($server)) {
    return;
  }

  $originalKeys = $query->getOriginalKeys() ?? '';
  $lowerOriginalKeys = mb_strtolower($originalKeys);
  $keywords = trim($lowerOriginalKeys);

  if (!empty($keywords)) {
    if (!preg_match('/^[a-zA-Z0-9æøåÆØÅ,\s-]+$/', $keywords) || strlen($keywords) < 3 || strlen($keywords) > 50) {
        $query->keys("");
    }
  }

}

/**
 * Convert user name to full name on ringsted portal
 *
 * @param $name
 * @param \Drupal\Core\Session\AccountInterface $account
 *
 * @return void
 */
function bc_utility_user_format_name_alter(&$name, AccountInterface $account) {
  $teamName = \Drupal::service('theme.manager')->getActiveTheme()->getName();
  if ($teamName == 'fds_portal_ringsted_theme') {
    if (!empty($account->field_full_name) && !empty($account->field_full_name->value)) {
      $name = $account->field_full_name->value;
    }
  }
}

function bc_utility_preprocess_status_messages(&$variables) {

  if (isset($variables['message_list'])) {

    $config = \Drupal::config('bc_utility_status_messages.settings');

    if (isset($variables['message_list']['status']) && $config->get('status')) {
      unset( $variables['message_list']['status'] );
    }

    if (isset($variables['message_list']['warning']) && $config->get('warning')) {
      unset( $variables['message_list']['warning'] );
    }

    if (isset($variables['message_list']['error'])  && $config->get('error')) {
      unset( $variables['message_list']['error'] );
    }

  }
}

function bc_utility_entity_insert(EntityInterface $entity) {
  $host = \Drupal::request()->getHost();
  // if new question is created on ringsted portal
  if (preg_match('/portal/', $host) && $entity->bundle() == 'forum') {
    $forum = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->load($entity->get('taxonomy_forums')[0]->target_id);

    if ($forum && $forum->bundle() === 'forums') {
      $postOwner = $entity->getOwner();
      if (!$postOwner->isAnonymous()) {
        $subscribers = \Drupal::database()
          ->query("SELECT * FROM anonymous_subscription WHERE entity_bundle='forum'");
        if ($subscribers) {
          // add all forum subscribers to the question
          foreach ($subscribers as $subscriber) {
            $account = user_load_by_mail($subscriber->email);
            if ($account && !$account->isAnonymous()) {
              \Drupal::service('forum_notifications_subscription.frequency')
                ->createNotificationFrequencyForUser($entity, $account);
            }
          }
        }
      }
    }
  }
}
