<?php

namespace Drupal\du_screen_questions\Plugin\Block;

use Drupal\Component\Utility\Html;
use Drupal\Core\Block\BlockBase;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;

/**
 * Provides Digital Universe Screening questions anchor links block.
 * @Block(
 *   id = "du_screen_questions_anchor_links",
 *   admin_label = @Translation("Digital Universe Screening questions anchor links"),
 * )
 */
class ScreeningQuestionsAnchorLinks extends BlockBase implements BlockPluginInterface {

  /**
   * {@inheritdoc}
   */
  public function build() {
    /** @var \Drupal\node\NodeInterface $node */
    $node = \Drupal::routeMatch()->getParameter('node');

    if ($node && $node->bundle() == 'os2web_page') {
      // Getting screening question keys.
      $situationKeys = [];
      if ($node->hasField('field_du_scr_ques_situation')) {
        $field_du_scr_ques_situation = $node->get('field_du_scr_ques_situation')->getValue();
        $situationKeys = array_column($field_du_scr_ques_situation, 'target_id');
      }

      // Returns if we have no situation added.
      if (empty($situationKeys)) {
        return NULL;
      }

      // Getting relates pages.
      $query = \Drupal::entityQuery('node')
        ->condition('status', 1)
        ->condition('field_du_screen_situation', $situationKeys, 'IN')
        ->exists('field_du_screen_category');
      $nids = $query->execute();
      $nodes = Node::loadMultiple($nids);

      // Getting categories of the related pages.
      foreach ($nodes as $node) {
        $relatedCategoriesTids[$node->field_du_screen_category->target_id] = $node->field_du_screen_category->target_id;
      }
      $query = \Drupal::entityQuery('taxonomy_term')
        ->condition('vid', 'du_screen_category')
        ->condition('tid', $relatedCategoriesTids, 'IN');
      $tids = $query->execute();
      $relatedCategories = Term::loadMultiple($tids);

      // Preparing categories links for render.
      $relatedCategoriesLinks = [];

      /** @var \Drupal\Component\Transliteration\TransliterationInterface $trans */
      $trans = \Drupal::service('transliteration');
      foreach ($relatedCategories as $category) {
        $relatedCategoriesLinks[$category->id()] = [
          'name' => $category->label(),
          'anchorId' => Html::getClass($trans->transliterate($category->label())),
        ];
      }

      $block['#relatedCategoriesLinks'] = $relatedCategoriesLinks;

      return $block;
    }
  }

  /**
   * {@inheritdoc}
   */
  public function getCacheContexts() {
    $context = parent::getCacheContexts(); // TODO: Change the autogenerated stub
    $context[] = 'url.path';
    $context[] = 'url.query_args';
    return $context;
  }

}
